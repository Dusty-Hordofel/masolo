// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

enum UserRole {
  SUPER_ADMIN // Full control over the platform
  ADMIN // Manages user and seller accounts, platform settings
  MODERATOR // Handles reviews, Q&A, and content moderation
  MARKETING_MANAGER // Creates and manages campaigns and promotions
  FINANCE_MANAGER // Oversees transactions, refunds, and payouts
  CUSTOMER_SUPPORT // Provides support to customers
  SELLER_SUPPORT // Provides support to sellers
  DATA_ANALYST // Analyzes user behavior, sales trends
  LOGISTICS_PARTNER // Manages warehousing, shipping, and returns
  SUPPLIER // Supplies inventory directly to the platform
  SELLER // Third-party seller managing their products
  USER // Regular customer browsing and shopping
  PREMIUM_USER // Customers with access to premium services
  FRAUD_SPECIALIST // Detects and prevents fraud
  COMPLIANCE_OFFICER // Ensures compliance with laws and regulations
}

model User {
  id                      String                 @id @default(uuid())
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  role                    UserRole               @default(USER)
  image                   String?
  password                String?
  accounts                Account[]
  sessions                Session[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?
  // twoFactorConfirmationId String?                @db.ObjectId
  lastLogin               DateTime?              @updatedAt
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  store                   Store[]

  @@map("users")
}

model Account {
  // id                String  @id @default(auto()) @map("_id") @db.ObjectId
  id                String  @id @default(uuid())
  userId            String
  // userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime @map("expiresAt")

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id                  String   @id @default(uuid())
  name                String
  price               Float    @default(0)
  description         String
  inventory           Int      @default(0)
  isPreOrderAvailable Boolean  @default(false)
  storeId             String   @map("store_id")
  store               Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  images              Image[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("products")
}

model Image {
  id        String   @id @default(uuid())
  publicId  String
  secureUrl String
  alt       String
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) // Date d'insertion automatique
}

// model Store {
//   id          String  @id @default(uuid())
//   name        String  @unique @map("store_name")
//   industry    String?
//   description String?
//   slug        String  @unique @map("slug")
//   owner       User?   @relation(fields: [ownerId], references: [id])
//   ownerId     String?

//   @@map("stores")
// }

model Store {
  id          String    @id @default(uuid())
  name        String    @unique @map("store_name")
  industry    String?
  description String?
  slug        String    @unique @map("slug")
  owner       User?     @relation(fields: [ownerId], references: [id])
  ownerId     String?
  products    Product[] // Ajout de la relation inverse avec Product
  payments    Payment[]
  // payments    Payment[]

  @@map("stores")
}

model Payment {
  id                     Int     @id @default(autoincrement())
  storeId                String? @map("store_id")
  stripeAccountId        String?
  stripeAccountCreatedAt Int?
  stripeAccountExpiresAt Int?
  detailsSubmitted       Boolean @default(false)

  store Store? @relation(fields: [storeId], references: [id], onDelete: Cascade) // ✅ Relation avec Store
}

model Cart {
  id              String     @id @default(uuid())
  cartItems       CartItem[]
  // items           Json?
  paymentIntentId String?
  clientSecret    String?
  isClosed        Boolean    @default(false)
}

model CartItem {
  id        String @id @default(uuid()) // ✅ Génère un ID unique pour chaque CartItem
  productId String // ID du produit
  qty       Int    @default(0)
  cartId    String @map("cart_id")
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

// model Order {
//   id                        Int     @id @default(autoincrement())
//   prettyOrderId             Int?
//   storeId                   Int?
//   items                     Json?
//   total                     Decimal @default(0.00)
//   stripePaymentIntentId     String? @unique
//   stripePaymentIntentStatus String?
//   name                      String?
//   email                     String?
//   createdAt                 Int?
//   addressId                 Int?
// }

// model Address {
//   id         Int     @id @default(autoincrement())
//   line1      String?
//   line2      String?
//   city       String?
//   state      String?
//   postalCode String?
//   country    String?
// }
