"use server";

import { singleLevelNestedRoutes } from "@/app/data/routes";
import { currentUser } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { redirect } from "next/navigation";

import Stripe from "stripe";

const stripe = new Stripe(
  "sk_test_51NZaglAJF88lxObTvUS00OhlIuefFG16bfLlymCGOiEhA9A7kAjp9Z8d18PM1yZtYJUHfsWJn4lL4TsPpqPsO5BS00BE5U4Fy4",
  {
    apiVersion: "2025-05-28.basil",
  }
);
// const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
//   apiVersion: "2024-04-10",
// });

/**
 * V√©rifie si un magasin a un compte Stripe connect√©.
 * @param providedStoreId - L'ID du magasin (optionnel si `useProvidedStoreId` est `false`).
 * @param useProvidedStoreId - Indique si `providedStoreId` doit √™tre utilis√©.
 * @returns {Promise<boolean>} - `true` si un compte Stripe est connect√©, sinon `false`.
 */
export async function hasConnectedStripeAccount(
  providedStoreId?: string,
  useProvidedStoreId = false
): Promise<boolean> {
  try {
    // V√©rification imm√©diate des param√®tres
    if (useProvidedStoreId && !providedStoreId) {
      console.warn(
        "‚ö†Ô∏è Aucune storeId fournie alors que useProvidedStoreId est activ√©."
      );
      return false;
    }

    if (!providedStoreId) {
      console.warn("‚ö†Ô∏è storeId is undefined.");
      return false; // Ou g√©rer autrement en fonction de votre logique
    }

    // Recherche du compte Stripe li√© au storeId
    const paymentRecord = await prisma.payment.findUnique({
      where: { storeId: providedStoreId },
      select: { stripeAccountId: true },
    });

    const isConnected = Boolean(paymentRecord?.stripeAccountId);

    // Logging en d√©veloppement uniquement
    if (process.env.NODE_ENV !== "production") {
      console.log("‚úÖ V√©rification du compte Stripe :", {
        providedStoreId,
        useProvidedStoreId,
        stripeAccountId: paymentRecord?.stripeAccountId,
        isConnected,
      });
    }

    return isConnected;
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la v√©rification du compte Stripe :",
      error
    );
    return false;
  }
}

// export async function createAccountLink(storeId?: string) {
//   try {
//     // 1Ô∏è‚É£ V√©rifier si l'utilisateur est connect√©
//     // const userId = await getUserId();
//     const user = await currentUser();
//     console.log("üöÄ ~ SellerLayout ~ user:MA", user);

//     if (!user /*|| user.role !== "USER"*/) return redirect("/auth/login");

//     // if (!userId) throw new Error("Unauthorized: User must be logged in.");

//     // 2Ô∏è‚É£ R√©cup√©rer le `storeId` si non fourni
//     if (!storeId) {
//       const store = await prisma.store.findFirst({
//         where: { ownerId: user.id },
//         select: { id: true },
//       });
//       if (!store) throw new Error("No store found for the user.");
//       storeId = store.id;
//     }

//     // 3Ô∏è‚É£ V√©rifier si un compte Stripe est d√©j√† associ√©
//     const paymentRecord = await prisma.payment.findFirst({
//       where: { storeId },
//       select: { stripeAccountId: true },
//     });

//     let stripeAccountId = paymentRecord?.stripeAccountId;

//     // 4Ô∏è‚É£ Si aucun compte Stripe, en cr√©er un
//     if (!stripeAccountId) {
//       const { id: newStripeAccountId } = await stripe.accounts.create({
//         type: "standard",
//       });

//       if (!newStripeAccountId)
//         throw new Error("Failed to create Stripe account.");

//       // Mettre √† jour ou cr√©er l'entr√©e en base
//       if (paymentRecord) {
//         await prisma.payment.updateMany({
//           where: { storeId },
//           data: { stripeAccountId: newStripeAccountId },
//         });
//       } else {
//         await prisma.payment.create({
//           data: { storeId, stripeAccountId: newStripeAccountId },
//         });
//       }

//       stripeAccountId = newStripeAccountId;
//     }

//     // 5Ô∏è‚É£ G√©n√©rer le lien de connexion Stripe
//     // const accountLink = await stripe.accountLinks.create({
//     //   account: stripeAccountId,
//     //   refresh_url: `${process.env.NEXT_PUBLIC_APP_URL}/account/payments`,
//     //   return_url: `${process.env.NEXT_PUBLIC_APP_URL}/account/payments`,
//     //   type: "account_onboarding",
//     // });

//     const accountLink = await stripe.accountLinks.create({
//       account: stripeAccountId,
//       refresh_url:
//         process.env.NEXT_PUBLIC_APP_URL +
//         singleLevelNestedRoutes.account.payments,
//       return_url:
//         process.env.NEXT_PUBLIC_APP_URL +
//         singleLevelNestedRoutes.account.payments,
//       type: "account_onboarding",
//     });

//     return accountLink.url;
//   } catch (err) {
//     console.error("Error creating Stripe account link:", err);
//     throw new Error("Failed to create Stripe account link.");
//   }
// }

export async function createAccountLink(
  storeId: string
): Promise<string | null> {
  console.log("üöÄ ~ storeId:SID", storeId);
  try {
    // 1Ô∏è‚É£ Ensure the user is authenticated
    const user = await currentUser();
    if (!user) {
      console.warn("üî¥ User is not authenticated. Redirecting to /auth/login.");
      return redirect("/auth/login");
    }

    // 2Ô∏è‚É£ Retrieve `storeId` if not provided
    if (!storeId) {
      const store = await prisma.store.findFirst({
        where: { ownerId: user.id },
        select: { id: true },
      });

      if (!store) {
        console.warn("‚ö†Ô∏è No store found for this user.");
        return null;
      }
      storeId = store.id;
    }

    // 3Ô∏è‚É£ Check if a Stripe account is already linked
    let paymentRecord = await prisma.payment.findFirst({
      where: { storeId },
      select: { stripeAccountId: true },
    });

    let stripeAccountId = paymentRecord?.stripeAccountId;

    // 4Ô∏è‚É£ Create a new Stripe account if none exists
    if (!stripeAccountId) {
      console.log("üöÄ Creating a new Stripe account for storeId:", storeId);

      const stripeAccount = await stripe.accounts.create({ type: "standard" });
      stripeAccountId = stripeAccount.id;

      // Store Stripe account in the database
      await prisma.payment.upsert({
        where: { storeId: storeId },
        update: {
          stripeAccountId,
          stripeAccountCreatedAt: stripeAccount.created,
        },
        create: { storeId, stripeAccountId },
      });

      console.log("‚úÖ Stripe account created:", stripeAccountId);
    }

    // 5Ô∏è‚É£ Generate the Stripe onboarding link
    const refreshUrl = `${process.env.NEXT_PUBLIC_APP_URL}${singleLevelNestedRoutes.account.payments}`;
    const returnUrl = `${process.env.NEXT_PUBLIC_APP_URL}${singleLevelNestedRoutes.account.payments}`;

    if (!refreshUrl || !returnUrl) {
      console.error("‚ùå Missing Stripe URLs in environment variables.");
      return null;
    }

    const accountLink = await stripe.accountLinks.create({
      account: stripeAccountId,
      refresh_url: refreshUrl,
      return_url: returnUrl,
      type: "account_onboarding",
    });

    console.log("üîó Stripe connection link successfully generated.");
    return accountLink.url;
  } catch (err) {
    console.error("‚ùå Error while creating Stripe account link:", err);
    return null; // ‚úÖ Prevents the application from crashing
  }
}

// export async function getStripeAccountDetails(storeId: string) {
//   try {
//     const payment = await prisma.payment.findFirst({
//       where: { storeId },
//       select: { stripeAccountId: true },
//     });

//     if (!payment || !payment.stripeAccountId) {
//       throw new Error("Stripe account not found");
//     }

//     const account = await stripe.accounts.retrieve(payment.stripeAccountId);
//     return account as Stripe.Account;
//   } catch (err) {
//     console.error("Error fetching Stripe account details:", err);
//     throw err;
//   }
// }

export async function getStripeAccountDetails(
  storeId: string
): Promise<Stripe.Account | null> {
  try {
    if (!storeId) {
      console.warn("‚ö†Ô∏è storeId is required to fetch Stripe account details.");
      return null;
    }

    // 1Ô∏è‚É£ Retrieve Stripe account ID from the database
    const paymentRecord = await prisma.payment.findFirst({
      where: { storeId },
      select: { stripeAccountId: true },
    });

    if (!paymentRecord?.stripeAccountId) {
      console.warn(`‚ö†Ô∏è No Stripe account found for storeId: ${storeId}`);
      return null;
    }

    // 2Ô∏è‚É£ Fetch account details from Stripe
    const account = await stripe.accounts.retrieve(
      paymentRecord.stripeAccountId
    );

    console.log("‚úÖ Successfully retrieved Stripe account details.");
    return account;
  } catch (err) {
    console.error("‚ùå Error retrieving Stripe account details:", err);
    return null; // Prevents application crashes
  }
}

// export async function updateStripeAccountStatus(storeId: string) {
//   try {
//     const account = await getStripeAccountDetails(storeId);

//     // V√©rifie si le compte Stripe a √©t√© cr√©√© avec succ√®s et met √† jour la base de donn√©es
//     if (account?.details_submitted) {
//       await prisma.payment.updateMany({
//         where: { storeId },
//         data: {
//           detailsSubmitted: account.details_submitted,
//           stripeAccountCreatedAt: account.created,
//         },
//       });
//     }

//     return account?.details_submitted ?? false;
//   } catch (err) {
//     console.error("Error updating Stripe account status:", err);
//     return false;
//   }
// }

export async function updateStripeAccountStatus(storeId: string) {
  try {
    // 1Ô∏è‚É£ V√©rifier si un compte Stripe est li√© au magasin
    const payment = await prisma.payment.findFirst({
      where: { storeId },
      select: { stripeAccountId: true },
    });

    if (!payment || !payment.stripeAccountId) {
      console.warn(`‚ö†Ô∏è No Stripe account found for storeId: ${storeId}`);
      return false; // Pas de compte Stripe associ√©
    }

    // 2Ô∏è‚É£ R√©cup√©rer les d√©tails du compte Stripe
    const account = await stripe.accounts.retrieve(payment.stripeAccountId);

    // 3Ô∏è‚É£ V√©rifier si le compte Stripe est correctement configur√©
    if (!account.details_submitted) {
      console.warn(
        `‚ö†Ô∏è Stripe account for storeId: ${storeId} is not fully completed.`
      );
      return false; // Le compte Stripe n'est pas totalement configur√©
    }

    // 4Ô∏è‚É£ Mettre √† jour l'√©tat du compte dans la base de donn√©es
    await prisma.payment.updateMany({
      where: { storeId },
      data: {
        detailsSubmitted: account.details_submitted,
        stripeAccountCreatedAt: account.created,
      },
    });

    // 5Ô∏è‚É£ Retourner un r√©sultat de succ√®s
    console.log(`‚úÖ Stripe account details updated for storeId: ${storeId}`);
    return true;
  } catch (err) {
    console.error(
      `‚ùå Error updating Stripe account status for storeId: ${storeId}`,
      err
    );
    return false; // Retourner false en cas d'erreur
  }
}

// ‚Ä¢	false est un indicateur explicite que l‚Äôop√©ration a √©chou√© ou que la condition requise n‚Äôest pas remplie. C‚Äôest une mani√®re claire et pr√©visible de signaler un √©chec dans le flux logique, ce qui est souvent attendu dans des fonctions qui retournent un r√©sultat bool√©en.
// ‚Ä¢	null, en revanche, peut √™tre interpr√©t√© de plusieurs mani√®res. Par exemple, il pourrait signifier qu‚Äôil n‚Äôy a pas de valeur disponible, que l‚Äôop√©ration n‚Äôa pas encore √©t√© ex√©cut√©e ou que quelque chose est ind√©fini. Ce n‚Äôest pas aussi explicite qu‚Äôun false pour indiquer un √©chec direct
